{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport logger from \"redux-logger\";\nimport ReduxThunk from 'redux-thunk';\nimport axios from 'axios';\nimport rootReducer from './reducers/index'; // the value from combineReducers\n\nimport storage from 'redux-persist/lib/storage';\nconst CancelToken = axios.CancelToken;\nconst source = CancelToken.source();\nconst middleware = applyMiddleware(ReduxThunk, logger);\nconst middlewares = [logger];\nconst persistConfig = {\n  key: 'root',\n  storage: storage\n};\nconst pReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares)); //export const persistor = persistStore(store);\n\nexport const persistor = persistStore(store); // Send access token in every request\n\naxios.interceptors.request.use(async function (config) {\n  // Set processing\n  //alert(\"called\");\n  // Explicit token\n  // const guestTokenUrl = `${API_URL}/user/guest/fetch-access-token`;\n  // if(typeof config.headers.Authorization === 'undefined' && config.url != guestTokenUrl){\n  //   let guestToken = getSessionItem('guestToken');\n  //   // Fetch guest token\n  //   // if(!guestToken){\n  //   //   const response = await axios({method: 'GET', url: guestTokenUrl});\n  //   //   guestToken = response.data.body.token;\n  //   // }\n  //   // if(guestToken){\n  //   //   config.headers = { ...config.headers, Authorization: `Bearer ${guestToken}` };\n  //   //   setSessionItem('guestToken', guestToken);\n  //   // }\n  // }\n  return config;\n}, function (error) {\n  // Set processing\n  if (typeof window.axiosThis !== 'undefined' && window.axiosThis) {\n    window.axiosThis.setState({\n      processing: false\n    });\n  }\n\n  return Promise.reject(error);\n}); // Add a response interceptor to check user session\n\naxios.interceptors.response.use(function (response) {\n  // Set processing\n  if (typeof window.axiosThis !== 'undefined' && window.axiosThis) {\n    window.axiosThis.setState({\n      processing: false\n    });\n  }\n\n  return response;\n}, function (error) {\n  // Set processing\n  if (typeof window.axiosThis !== 'undefined' && window.axiosThis) {\n    window.axiosThis.setState({\n      processing: false\n    });\n  } // If session is unauthorised, then logout the user.\n\n\n  if (typeof error.response !== 'undefined' && typeof error.response.status !== 'undefined' && (error.response.status === 401 || error.response.status === 403)) {\n    // Redirect to login page\n    //if(typeof error.response.config.verifyAuth === 'undefined' || error.response.config.verifyAuth === true){\n    //\tToastsStore.error('Your are logged out.');\n    // clearSession(`${ROOT}${ROUTES.HOME.path}`);\n    return Promise.reject(error); //}\n  } else {// if(\n      //   typeof error.response !== 'undefined' \n      //   && typeof error.response.status !== 'undefined' \n      //   && error.response.status === 404){\n      //   // Redirect to home page\n      //   window.location = '/';\n      // }\n    }\n\n  if (typeof error.response !== 'undefined') {\n    if (typeof error.response.config.hideError === 'undefined' || error.response.config.hideError != error.response.status) {\n      const msg = typeof error.response.data.message !== 'undefined' ? error.response.data.message : error.response.data;\n\n      if (typeof msg == 'string') {// ToastsStore.error(msg);\n      }\n    }\n  } // Do something with response error\n\n\n  return Promise.reject(error);\n});","map":{"version":3,"sources":["C:/Users/UDayshy/Downloads/Appiness_assignment-main/Appiness_assignment-main/src/store.js"],"names":["createStore","applyMiddleware","compose","persistStore","persistReducer","logger","ReduxThunk","axios","rootReducer","storage","CancelToken","source","middleware","middlewares","persistConfig","key","pReducer","store","persistor","interceptors","request","use","config","error","window","axiosThis","setState","processing","Promise","reject","response","status","hideError","msg","data","message"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport logger from \"redux-logger\";\r\nimport ReduxThunk from 'redux-thunk';\r\nimport axios from 'axios';\r\nimport rootReducer from './reducers/index'; // the value from combineReducers\r\n\r\n\r\n\r\nimport storage from 'redux-persist/lib/storage'\r\nconst CancelToken = axios.CancelToken;\r\nconst source = CancelToken.source();\r\n\r\nconst middleware = applyMiddleware(ReduxThunk, logger);\r\nconst middlewares = [logger];\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage,\r\n};\r\n\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n//export const persistor = persistStore(store);\r\nexport const persistor = persistStore(store)\r\n// Send access token in every request\r\naxios.interceptors.request.use(async function (config) {\r\n  // Set processing\r\n//alert(\"called\");\r\n\r\n\r\n  // Explicit token\r\n  // const guestTokenUrl = `${API_URL}/user/guest/fetch-access-token`;\r\n  // if(typeof config.headers.Authorization === 'undefined' && config.url != guestTokenUrl){\r\n  //   let guestToken = getSessionItem('guestToken');\r\n\r\n  //   // Fetch guest token\r\n  //   // if(!guestToken){\r\n  //   //   const response = await axios({method: 'GET', url: guestTokenUrl});\r\n  //   //   guestToken = response.data.body.token;\r\n  //   // }\r\n\r\n  //   // if(guestToken){\r\n  //   //   config.headers = { ...config.headers, Authorization: `Bearer ${guestToken}` };\r\n  //   //   setSessionItem('guestToken', guestToken);\r\n  //   // }\r\n  // }\r\n\r\n\treturn config;\r\n}, function (error) {\r\n  // Set processing\r\n  if(typeof window.axiosThis !== 'undefined' && window.axiosThis){\r\n    window.axiosThis.setState({\r\n      processing: false\r\n    });\r\n  }\r\n\treturn Promise.reject(error);\r\n});\r\n\r\n\r\n// Add a response interceptor to check user session\r\naxios.interceptors.response.use(function (response) {\r\n  // Set processing\r\n  if(typeof window.axiosThis !== 'undefined' && window.axiosThis){\r\n    window.axiosThis.setState({\r\n      processing: false\r\n    });\r\n  }\r\n  return response;\r\n}, function (error) {\r\n  // Set processing\r\n  if(typeof window.axiosThis !== 'undefined' && window.axiosThis){\r\n    window.axiosThis.setState({\r\n      processing: false\r\n    });\r\n  }\r\n\t// If session is unauthorised, then logout the user.\r\n  if(\r\n  \ttypeof error.response !== 'undefined' \r\n  \t&& typeof error.response.status !== 'undefined' \r\n  \t&& (error.response.status === 401 || error.response.status === 403)){\r\n  \t// Redirect to login page\r\n  \t//if(typeof error.response.config.verifyAuth === 'undefined' || error.response.config.verifyAuth === true){\r\n  \t//\tToastsStore.error('Your are logged out.');\r\n     // clearSession(`${ROOT}${ROUTES.HOME.path}`);\r\n\r\n      return Promise.reject(error);\r\n  \t//}\r\n  }else{\r\n    // if(\r\n    //   typeof error.response !== 'undefined' \r\n    //   && typeof error.response.status !== 'undefined' \r\n    //   && error.response.status === 404){\r\n    //   // Redirect to home page\r\n    //   window.location = '/';\r\n    // }\r\n  }\r\n\r\n  if(typeof error.response !== 'undefined'){\r\n    if(typeof error.response.config.hideError === 'undefined' || error.response.config.hideError != error.response.status){\r\n        const msg = typeof error.response.data.message !== 'undefined' ? error.response.data.message : error.response.data;\r\n        if(typeof msg == 'string'){\r\n         // ToastsStore.error(msg);\r\n        }\r\n    }\r\n  }\r\n  // Do something with response error\r\n  return Promise.reject(error);\r\n});"]},"metadata":{},"sourceType":"module"}